B@RT, [03.01.19 16:23]
Почти любой проект начинается с создания базового проекта, который в себя включает:
- примитивное приложение с 1-3 пеустых страниц
- базовая система роутинга
- выбор ui-библиотеки/фреймворка
- настройка процесса сборки и запуска в дев режиме
- подбор доп.пакетов, которые тебе точно нужны будут (прописывания их в packages.json)

Начни с этого. Учитывая, что у тебя реакт, почти все можно сделать родными cli инструментами. Очень не советую использовать так называемые boilerplate. Это такая заготовка, которая описывает тебе все пункты выше. Но, т.к. там может быть что-то устаревшее или специфичное и мы учимся, нам такой хоккей не нужен.

Дальше. Предположим, ты строишь некоторую crm или какую-то подобную сложную систему. Не рекламное приложение. Значит в такой системе нам нужна система авторизации, регистрации. Раздельный доступ на разные страницы, система проверки и какой-то работающий бэк. Все это завернуть в какой нибудь material-ui и радоваться, что все так просто.

Требования к стеку и архитектуре:
- последний реакт
- предлагаю использовать пакет material-ui для реакта. он предлагает уже готовый набор компонентов и не нужно ничего выдумывать с версткой
- сборку делаем через родной react-scripts или create-react-app. по сути, и одно и второе - обертка вокруг webpack (кстати, будет не лишним покурить, что это такое, как работает и т.д.). Единственная проблема, если зхочешь внести какие-то сложные изменения в процесс сборки, то это будет довольно трудно, т.к. обертка представляет из себя набор больших конфигов
- создавая архитектуру, заложи сразу такое понятие, как контейнеры, layouts, и прочее. Так тебе будет проще создавать сложные страницы.
- модульность мы тут пропустим, потому что сейчас это лишнее
- redux сейчас не использовать. мы к нему вернемся позже, как вторым этапом доработки приложения
- собери так же себе простейший бэк на ноде, который будет принимать на указанные роуты параметры и отвечать фронту
- стремись писать аккуратный код, с комментами и нормальным форматированием, это тебе сильно поможет, когда кода станет много
- в качестве системы проверки кода можно добавить в проект eslint. это такая утилита, которая при запуске, пробегает по коду и формирует отчет с  семмантическими ошибками. правила проверки описываются отдельно
- для авто-форматирования кода многие используют приттиер, но сейчас он может тебе мешать
- для бэка берем самое простое решение - node+express. бд не нужна
- в качестве системы работы с аякс запросами можно взять axios. Можно и совсем по ванильному - fetch. Мне нравится axios
- бэк должен всегда отвечать правильным кодом. Если все норм - 200, если ошибка правильных данных - 422 и т.д.
- при построении архитектуры, не забывай, что делать запросы прямо из компонента - плохо. для этого есть такое понятия, как сервисный слой

Итак, предположим, ты сделал себе заготовку, какие-то пустые страницы есть. Есть бэк, который отвечает все кодом 200 и пустым телом.

Делаем первые 2 формы:
- регистрации
- авторизация

И третья страница - пустая, на которую мы можем попасть, только если авторизировались.

Форма регистрации:
- логин
- мыло
- пароль
- повтор пароля

Все это нужно валидировать из реакта. В валидацию попадает такое, как обязательность, минимальная и максимальная длина, правильность данных (проверять,что мыло корректно написано) и что пароль в обоих полях правильный. Если валидацию не проходишь - потсвечивать поле, писать под ним проблему. И блокировать кнопку "отправить". Отправлять данные себе на бэк. Нигда не нужно их сохранять. Просто сам факт отправить запрос - получить ответ 200.
Дальше, сделай валидацию все тех же полей, только на бэке. И если бэку поля не понравились - вернуть соответствующий код и в теле запроса, указать, какие поля тебе не понравились и почему.

Форма авторизации:
- логин/мыло
- пароль

Валидировать особо ничего не надо, просто не пропускать пустые поля. Точно так же - отправить запрос на бэк. Если все норм - вернуть код 200. Забей прямо в код на сервере 1-2 правильный пользователей. Мы пока бд не пользуемся.

B@RT, [03.01.19 16:23]
после того, как ты авторизировал пользователя - ты должен это как-то запомнить. самое простое решение - использовать куки. более сложное - токен. давай сделаем через токен. выглядеть это должно примерно так:
- если пользователь прошел валидацию, то ты ему в ответе вернул токен.
- токен - строка, длиной в 32 и более случайных символов. но ты должен хранить этот токен у себя на сервере (вместе с логином, паролем)
- можно использовать jwt, но не сейчас )) его прикол в том, что тебе не нужно хранить сам токен. он будет динамически разбираться и проверяться
- дальше, клиент сохраняет этот токен у себя в localstorage и считает, что он авторизирован
- каждый следующий запрос на бэк содержит в заголовке токен
- соответственно, если ты с токеном, больше не должен пускать пользователя на форму регистрации/авторизации. Если ты без токена, не пускать его на главную страницу и редиректить на login


дополнительно
завести какие-то layouts или контейнеры. смысл в том, что на странице логина/авторизации у тебя не должно быть ничего, кроме формы. на внутренней странице можно уже показывать какое-то нав-меню с ссылками для внутренней навигации. можно прилепить туда кнопку logout, которая будет удалять токен из стора
--

это самое примитивное приложение, немного напоминающее боевые условия. как закончишь - будем двигаться дальше и усложнять это же задание

B@RT, [03.01.19 16:28]
да, кстати, про формотирования и правила кода, есть хорошие рекомендации от airbnb и гугл

B@RT, [03.01.19 16:29]
[Переслано от B@RT]
https://habr.com/company/oleg-bunin/blog/353618/

B@RT, [03.01.19 16:29]
[Переслано от B@RT]
https://github.com/airbnb/javascript

B@RT, [03.01.19 16:29]
[Переслано от B@RT]
GitHub - prettier/prettier: Prettier is an opinionated code formatter.
https://github.com/prettier/prettier

B@RT, [03.01.19 16:29]
[Переслано от B@RT]
Перевод AirBnB Style Guide / Хабр
https://habr.com/company/uprock/blog/204848/
